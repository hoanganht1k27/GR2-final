input {
  snmp {
    hosts => {{ es_master_http }}
               { host => "udp:10.205.21.35/161" community => "viettel_aaa" version => "2c" retries => 2  timeout => 10000 },
               { host => "udp:10.205.21.36/161" community => "viettel_aaa" version => "2c" retries => 2  timeout => 10000 }
             ]
    add_field => {host => "%{[@metadata][host_protocol]}:%{[@metadata][host_address]}/%{[@metadata][host_port]},%{[@metadata][host_community]}"}
    add_field => {host_address => "%{[@metadata][host_address]}"}
    add_field => {host_community => "%{[@metadata][host_community]}"}
    get => ["1.3.6.1.2.1.1.1.0", "1.3.6.1.2.1.1.3.0", "1.3.6.1.2.1.1.4.0", "1.3.6.1.2.1.1.6.0", "1.3.6.1.2.1.1.7.0", "1.3.6.1.2.1.25.1.2.0", "1.3.6.1.2.1.25.1.3.0", "1.3.6.1.2.1.25.1.4.0", "1.3.6.1.2.1.25.1.5.0", "1.3.6.1.2.1.25.1.6.0", "1.3.6.1.4.1.22610.2.4.1.6.2.0", "1.3.6.1.4.1.22610.2.4.1.6.3.0", "1.3.6.1.4.1.22610.2.4.1.6.4.0", "1.3.6.1.4.1.22610.2.4.1.2.1.0", "1.3.6.1.4.1.22610.2.4.1.2.2.0", "1.3.6.1.4.1.22610.2.4.1.4.1.0", "1.3.6.1.4.1.22610.2.4.1.4.2.0", "1.3.6.1.4.1.22610.2.4.1.5.1.0", "1.3.6.1.4.1.22610.2.4.1.5.7.0", "1.3.6.1.4.1.22610.2.4.1.5.8.0", "1.3.6.1.4.1.22610.2.4.1.6.1.0"]
    walk => ["1.3.6.1.4.1.22610.2.4.1.3.2.1.1", "1.3.6.1.4.1.22610.2.4.1.3.2.1.2", "1.3.6.1.4.1.22610.2.4.1.5.9.1.1", "1.3.6.1.4.1.22610.2.4.1.5.9.1.2", "1.3.6.1.4.1.22610.2.4.1.5.9.1.3", "1.3.6.1.2.1.25.2.3.1.1", "1.3.6.1.2.1.25.2.3.1.2", "1.3.6.1.2.1.25.2.3.1.3", "1.3.6.1.2.1.25.2.3.1.4", "1.3.6.1.2.1.25.2.3.1.5", "1.3.6.1.2.1.25.2.3.1.6", "1.3.6.1.2.1.25.2.3.1.7", "1.3.6.1.2.1.25.3.2.1.1", "1.3.6.1.2.1.25.3.2.1.2", "1.3.6.1.2.1.25.3.2.1.3", "1.3.6.1.2.1.25.3.2.1.5", "1.3.6.1.2.1.25.3.2.1.6", "1.3.6.1.2.1.31.1.1.1.1", "1.3.6.1.2.1.2.2.1.1", "1.3.6.1.2.1.2.2.1.2", "1.3.6.1.2.1.2.2.1.3", "1.3.6.1.2.1.2.2.1.4", "1.3.6.1.2.1.2.2.1.5", "1.3.6.1.2.1.2.2.1.6", "1.3.6.1.2.1.2.2.1.7", "1.3.6.1.2.1.2.2.1.8", "1.3.6.1.2.1.2.2.1.9", "1.3.6.1.2.1.2.2.1.13", "1.3.6.1.2.1.2.2.1.14", "1.3.6.1.2.1.2.2.1.19", "1.3.6.1.2.1.2.2.1.20", "1.3.6.1.2.1.31.1.1.1.6", "1.3.6.1.2.1.31.1.1.1.10", "1.3.6.1.2.1.31.1.1.1.15", "1.3.6.1.2.1.31.1.1.1.18"]
    interval => 60
    tags => LB_snmp
  }
}

filter {
  if "LB_snmp" in [tags] {
    ruby {
      code => '
        list_field = event.to_hash
        file = File.open("/etc/logstash/dictionary/LB_oid_mapping.txt", "r")
        data = file.readlines
        mapping_data = []
        data.each{ |item|
          data_split = item.split("=")
          mapping_data << { "name" => data_split[0], "oid" => data_split[1].sub("\r\n", "").sub("\n", "") }
        }
        list_field.each { |key, value|
          if (key =~ /iso.org/)
            mapping_data.each { |item|
              cut_string = key.sub(item["oid"], "")
              compare_key = key.sub(cut_string, "")
              if (compare_key == item["oid"])
                event.set(key.sub(item["oid"] + ".", item["name"] + "."), value)
                event.remove(key)
              end
              if (cut_string == "")
                event.set(key.sub(item["oid"], item["name"]), value)
                event.remove(key)
              end
            }
          end
        }
      '
    }

    ruby {
      code => '
        list_field = event.to_hash
        interface_mapping = []
        list_field.each { |key, value|
          if (key =~ /interface.ifName/)
            interface_index = key.split(".")[-1]
            interface_mapping << { "index" => interface_index, "name" => value }
          end
        }

        list_field.each { |key, value|
          if (key =~ /interface.ifType/ or key =~ /interface.ifMtu/ or key =~ /interface.ifSpeed/ or key =~ /interface.ifPhysAddress/ or key =~ /interface.ifAdminStatus/ or key =~ /interface.ifOperStatus/ or key =~ /interface.ifLastChange/ or key =~ /interface.ifInDiscards/ or key =~ /interface.ifInErrors/ or key =~ /interface.ifOutDiscards/ or key =~ /interface.ifOutErrors/ or key =~ /interface.ifHCInOctets/ or key =~ /interface.ifHCOutOctets/ or key =~ /interface.ifHighSpeed/ or key =~ /interface.ifAlias/)
            index = key.split(".")[-1]
            interface_mapping.each { |item|
              if (item["index"] == index)
                replace_key =  key.gsub(/\.\d+$/, ".<" + item["name"] + ">" )
                event.set(replace_key, value)
                event.remove(key)
              end
            }
          end

        }
      '
    }
  }
}


output {
  if "LB_snmp" in [tags] {
    elasticsearch {
      hosts => {{ es_master_http }}
      index => "snmp-lb"
      cacert => "/etc/logstash/certs/{{ inventory_hostname }}.pem"
      user => "{{ beats.logstash.logstash_writer.username }}"
      password => "{{ beats.logstash.logstash_writer.password }}"
      ssl_certificate_verification => false
    }
  }
}

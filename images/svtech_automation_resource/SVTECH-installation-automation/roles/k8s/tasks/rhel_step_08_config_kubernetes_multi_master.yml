---
- name: K8S - Multi Master [STEP 01] - Download cfssl tool
  shell: "chdir=/usr/local/bin/ {{ item }}"
  with_items:
    - wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O cfssl
    - wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O cfssljson
    - chmod 775 *

- name: K8S - Multi Master [STEP 01] - Create key path
  file:
    path: /opt/key
    state: directory
    force: yes

- name: K8S - Multi Master [STEP 02] - Copy ca file
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "{{ role_path }}/files/ca/ca-config.json", dest: "/opt/key/ca-config.json"}
    - { src: "{{ role_path }}/files/ca/ca-csr.json", dest: "/opt/key/ca-csr.json"}
    - { src: "{{ role_path }}/files/ca/kubernetes-csr.json", dest: "/opt/key/kubernetes-csr.json"}

- name: K8S - Multi Master [STEP 03] - Gencert pem on init master node
  shell: chdir=/opt/key cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  when:
    - init_node is defined
    - init_node == True

- name: K8S - Multi Master [STEP 04] - Gencert on init master node
  shell: |
    chdir=/opt/key \
    cfssl gencert \
    -ca=ca.pem \
    -ca-key=ca-key.pem \
    -config=ca-config.json \
    -hostname={{ VIP }},{% for item in master_node_list %}{{ item["IP"] }},{% endfor %}127.0.0.1,kubernetes.default \
    -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
  when:
    - init_node is defined
    - init_node == True


- name: K8S - Multi Master [STEP 05] - Install sshpass
  yum:
    name: sshpass
    state: latest

- name: K8S - Multi Master [STEP 06] - Copy ca file from init master node to others master node
  shell: sshpass -p "{{ ansible_ssh_pass }}" scp -o StrictHostKeyChecking=no /opt/key/* {{ ansible_ssh_user }}@{{ item["IP"] }}:/opt/key
  with_items:
    "{{ others_master_node }}"
  loop_control:
    label: "{{ item['IP'] }}"
  when:
    - init_node is defined
    - init_node == True

- name: K8S - Multi Master [STEP 07] - Create etcd directory
  file:
    path: "{{ item }}"
    state: directory
    force: yes
  with_items:
    - /etc/etcd
    - /var/lib/etcd

- name: K8S - Multi Master [STEP 08] - Copy ca pem file to etcd
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
    force: yes
  with_items:
    - { src: "/opt/key/ca.pem", dest: "/etc/etcd/ca.pem"}
    - { src: "/opt/key/kubernetes.pem", dest: "/etc/etcd/kubernetes.pem"}
    - { src: "/opt/key/kubernetes-key.pem", dest: "/etc/etcd/kubernetes-key.pem"}

- name: K8S - Multi Master [STEP 09] - Download etcd package
  get_url:
    url: https://github.com/etcd-io/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz
    dest: /var/tmp/etcd-v3.3.13-linux-amd64.tar.gz
    mode: 775

- name: K8S - Multi Master [STEP 10] - Install etcd
  shell: "chdir=/var/tmp/ {{ item }}"
  with_items:
    - tar xvzf etcd-v3.3.13-linux-amd64.tar.gz
    - mv etcd-v3.3.13-linux-amd64/etcd* /usr/local/bin/

- name: K8S - Multi Master [STEP 11] - Create etcd service
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
    backup: true
  with_items:
    - { src: "{{ role_path }}/templates/etcd.service.j2", dest: "/etc/systemd/system/etcd.service" }

- name: K8S - Multi Master [STEP 12] - Start etcd service
  systemd:
    state: restarted
    daemon_reload: yes
    name: etcd
    enabled: yes

- name: K8S - Multi Master [STEP 13] - Create /etc/kubernetes/pki directory
  file:
    path: /etc/kubernetes/pki
    state: directory
    force: yes

- name: K8S - Multi Master [STEP 14] - Create config file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
    backup: true
  with_items:
    - { src: "{{ role_path }}/templates/config.j2", dest: "/opt/config.yaml" }

- name: K8S - Multi Master [STEP 14] - Init Kubernetes
  shell: "kubeadm init --config=/opt/config.yaml"
  when:
    - init_node is defined
    - init_node == True

- name: K8S - Multi Master [STEP 15] - Copy pki from init master node to others master node
  shell: "{{ item }}"
  with_items:
    - mkdir -p /opt/pki
    - yes|cp -rf /etc/kubernetes/pki/* /opt/pki
    - rm -rf /opt/pki/apiserver.*
  when:
    - init_node is defined
    - init_node == True

- name: K8S - Multi Master [STEP 15] - Copy pki from init master node to others master node
  shell: sshpass -p "{{ ansible_ssh_pass }}" scp -o StrictHostKeyChecking=no /opt/pki/* {{ ansible_ssh_user }}@{{ item["IP"] }}:/etc/kubernetes/pki
  with_items:
    "{{ others_master_node }}"
  loop_control:
    label: "{{ item['IP'] }}"
  when:
    - init_node is defined
    - init_node == True

- name: K8S - Multi Master [STEP 15] - Create token and join command
  shell: kubeadm token create --print-join-command
  register: get_join_command
  when:
    - init_node is defined
    - init_node == True

- name: Create join_command var
  set_fact:
    join_command: "{{ get_join_command.stdout }}"
  delegate_to: localhost
  run_once: yes

- name: debug
  debug:
    msg: "{{ join_command }}"

- name: K8S - Multi Master [STEP 16] - Join others master to control-plane
  shell: "{{ join_command }} --control-plane"
  when:
    - init_node is not defined

- name: K8S - Multi Master [STEP 17] - Set up kubectl access
  shell: "{{ item }}"
  with_items:
    - mkdir -p $HOME/.kube
    - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    - chown $(id -u):$(id -g) $HOME/.kube/config

- debug:
    var: cni

- name: K8S - Multi Master [STEP 18] - Install network add-on - calico
  shell: kubectl apply -f "https://docs.projectcalico.org/manifests/calico.yaml"
  when:
    - init_node is defined
    - init_node == True
    - cni == 'calico'

- name: K8S - Multi Master [STEP 18] - Install network add-on - weaver
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  when:
    - init_node is defined
    - init_node == True
    - cni == 'weave'

- name: K8S - Multi Master [STEP 19] - Collect Master Nodes's name that set Schedule=True
  set_fact:
    master_is_schedule: "{% for host in groups['all'] %}{% if hostvars[host]['schedule'] == True %}{{hostvars[host].inventory_hostname}},{% endif %}{% endfor %}"
    master_is_init_node: "{% for host in groups['all'] %}{% if hostvars[host]['init_node'] is defined %}{{hostvars[host].inventory_hostname}}{% endif %}{% endfor %}"
  run_once: true
  delegate_to: "{% for host in groups['all'] %}{% if hostvars[host]['init_node'] is defined %}{{hostvars[host].inventory_hostname}}{% endif %}{% endfor %}"

- name: K8S - Multi Master [STEP 20] - Printing Master Nodes's name that set Schedule=True
  debug:
    msg: "{{ master_is_schedule[:-1].split(',') }}"
  run_once: true
  delegate_to: "{{master_is_init_node}}"

- name: K8S - Multi Master [STEP 21] - Remove Taints NoSchedule on Master Nodes that set schedule=True
  shell: "kubectl taint nodes {{ item }} node-role.kubernetes.io/master- || /bin/true"
  delegate_to: "{{master_is_init_node}}"
  run_once: true
  with_items: "{{ master_is_schedule[:-1].split(',') }}"

- name: K8S - Multi Master [STEP 20] - Install Auto complete
  shell: echo "source <(kubectl completion bash)" > /etc/bash_completion.d/kubernetes.sh


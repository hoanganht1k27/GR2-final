
# apply Service "NETCONF-POWER" {
#    import "generic-service"
#    import "NETCONF-BASIC-TEMPLATE"
  
#    vars.plugin_log_prefix = "POWER"
#    vars.service_type = "HARDWARE"

#    vars.plugin_tableview_file = PluginDir + "/Junos_tableview/hardware_state.yml"
#    #vars.plugin_tableview_file = "/usr/share/icinga2/plugins/libexec/Junos_tableview/hardware_state.yml"
#    vars.plugin_data_type = "ChassisPower"

#    vars.plugin_data_field = "['DCInputState','DCOutputPower','DCOutputCurrent']"
#    vars.plugin_print_item_key = "True"

#    vars.plugin_perf_data_field = "['DCOutputPower','DCOutputCurrent']"
#    vars.plugin_perf_data_item_key = "True"

#    check_interval = 10m
#    assign where match("*MX*", host.vars.model) 
# }

# apply Service "NETCONF-BGP-INET0" {
#    import "generic-service"
#    import "NETCONF-BASIC-TEMPLATE"

#    vars.plugin_log_prefix = "BGP"
#    vars.service_type = "BGP"

#    vars.plugin_tableview_file = PluginDir + "/Junos_tableview/bgp.yml"
#    vars.plugin_data_type = "BGPSummary"

#    vars.plugin_data_field = "['route_received_inet0','route_actived_inet0','route_advertised_inet0']"
#    vars.plugin_print_item_key = "True"

#    vars.plugin_perf_data_field = "['route_received_inet0','route_advertised_inet0']"
#    vars.plugin_perf_data_item_key = "True"

#    check_interval = 10m
#    assign where match("*MX*", host.vars.model) 
# }


# apply Service "NETCONF-OPTIC-" for  (interface_name    =>    if_index    in    host.vars.interface)    {
#     import "generic-service"
#     import "NETCONF-BASIC-TEMPLATE"
   
#     display_name   =     "NETCONF-OPTIC-" + interface_name

#     vars.plugin_log_prefix = "OPTIC-MX-"
#     vars.service_type = "LINK"

#     vars.plugin_tableview_file = PluginDir + "/Junos_tableview/layer1_info.yml"
#     vars.plugin_rpc_kwargs = "{'interface-name':'"  +  interface_name + "'}"
#     if ( match("*MX*", host.vars.model) ) {
#         vars.plugin_data_type = "OPTIC-MX-"
#     }
#     if ( match("*ACX*", host.vars.model) ) {
#         vars.plugin_data_type = "OPTIC-ACX-"
#     }

#     vars.plugin_data_field = "['OpticRX','OpticTX','rxLowWarn','rxLowAlarm']"
#     vars.plugin_perf_data_field = "['OpticRX']"
    
#     enable_perfdata = true
#     check_interval = 10m
#     assign    where    host.vars.interface &&   match("xe*", interface_name)
#     assign    where    host.vars.interface &&   match("ge*", interface_name)
# }


# apply Service "NETCONF-ENV-" for  (fpc_slot    =>    fpc_index    in    host.vars.fpc)    {
#     import "generic-service"
#     import "NETCONF-BASIC-TEMPLATE"
   
#     display_name   =     "NETCONF-ENV-" + fpc_slot

#     vars.plugin_log_prefix = "ENV-MX-"
#     # vars.plugin_log_level = "DEBUG"
#     vars.service_type = "FPC_Specific_Enviroment"
    

#     vars.plugin_tableview_file = PluginDir + "/Junos_tableview/hardware_state.yml"
#     vars.plugin_rpc_kwargs = "{'fpc-slot':'0'}"
#     vars.plugin_data_type = "FPC_Specific_Enviroment"

#     vars.plugin_data_field = "['state','temperature-name','temperature']"
#     vars.plugin_print_item_key = "False"

#     vars.plugin_perf_data_field = "[]"
#     # enable_perfdata = true
#     check_interval = 10m
#     assign where match("*MX*", host.vars.model)
# }


apply Service "NETCONF-ENV-" for  (fpc_slot    =>    fpc_index    in    host.vars.fpc)    {
    import "generic-service"
    import "NETCONF-BASIC-TEMPLATE"
   
    display_name   =     "NETCONF-ENV-" + fpc_slot

    vars.plugin_log_prefix = "ENV-MX-"
    # vars.plugin_log_level = "DEBUG"
    vars.service_type = "Temperature"
    

    vars.plugin_tableview_file = PluginDir + "/Junos_tableview/hardware_state.yml"
    vars.plugin_rpc_kwargs = "{'fpc-slot':'" + fpc_slot.substr(3) + "'}"
    vars.plugin_data_type = "FPC_Enviroment"

    vars.plugin_data_field = "['state','temperature_Intake_String','temperature_Intake','temperature_Exhaust_A_String','temperature_Exhaust_A','temperature_Exhaust_B_String','temperature_Exhaust_B']"
    # vars.plugin_print_item_key = "False"

    vars.plugin_perf_data_field = "['temperature_Intake','temperature_Exhaust_A','temperature_Exhaust_B']"
    vars.netconf_crit = 40
    vars.netconf_warn = 30
    # vars.plugin_perf_data_item_key = "False"
    enable_perfdata = true
    check_interval = 5m
    # assign where match("*MX*", host.vars.model)
    assign where match("*THA*", host.name)
    ignore where match("*LDG03THA*", host.name)

}
